e_tooltip(trigger = "axis") |>
e_title(index_name)
}
runApp()
box::use(
echarts4r[e_charts,e_line,e_theme,e_datazoom,e_tooltip,e_title],
dplyr[filter,group_by,arrange],
)
country_plot <- function(data , index_name = "Customer Price Index", country = "TR"){
data |>
filter(index_names == index_name & country_abb == country) |>
group_by(country_name) |>
arrange(date) |>
e_charts(x = date) |>
e_line(serie = rate) |>
e_theme("dark") |>
e_datazoom(type = "slider") |>
e_tooltip(trigger = "axis") |>
e_title(index_name)
}
box::use(
app/logic/plot_func,
)
box::use(
shiny[moduleServer, NS],
echarts4r[echarts4rOutput,renderEcharts4r],
)
#' @export
ui <- function(id) {
ns <- NS(id)
echarts4rOutput("plot")
}
#' @export
server <- function(id,data) {
moduleServer(id, function(input, output, session) {
output$plot <- renderEcharts4r({plot_func$country_plot(data)})
})
}
box::use(
shiny[bootstrapPage, moduleServer, NS,reactive],
)
box::use(
shiny[bootstrapPage, moduleServer, NS,reactive],
)
box::use(
app/view/plots,
app/logic/get_data,
)
#' @export
ui <- function(id) {
ns <- NS(id)
bootstrapPage(
plots$ui(ns("plot"))
)
}
#' @export
server <- function(id) {
moduleServer(id, function(input, output, session) {
df <- reactive({get_data$load_data()})
plots$server("plot", df())
})
}
runApp()
box::use(
shiny[bootstrapPage, moduleServer, NS,reactive],
)
box::use(
app/view/plots,
app/logic/get_data,
)
#' @export
ui <- function(id) {
ns <- NS(id)
bootstrapPage(
plots$ui(ns("plot"))
)
}
#' @export
server <- function(id) {
moduleServer(id, function(input, output, session) {
df <- get_data$load_data
plots$server("plot", df)
})
}
runApp()
df <- reactive({get_data$load_data})
runApp()
renv::load()
library(rhino)
library(echarts4r)
library(naniar)
library(reactable)
library(htmlwidgets)
library(countrycode)
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
shiny::runApp()
df <- reactive({get_data$load_data()})
df
df()
runApp()
data()
box::use(
echarts4r[e_charts,e_line,e_theme,e_datazoom,e_tooltip,e_title],
dplyr[filter,group_by,arrange],
)
country_plot <- function(data , index_name = "Customer Price Index", country = "TR"){
data |>
filter(index_names == index_name & country_abb == country) |>
group_by(country_name) |>
arrange(date) |>
e_charts(x = date) |>
e_line(serie = rate) |>
e_theme("dark") |>
e_datazoom(type = "slider") |>
e_tooltip(trigger = "axis") |>
e_title(index_name)
}
box::use(
dplyr[select,distinct,pull,mutate,rename,left_join],
tidyr[drop_na,pivot_longer],
readr[read_csv],
purrr[set_names,map2_dfr,possibly],
tibble[tibble],
)
box::use(
app/logic/data_list
)
# Datasets
#' @export
load_data <- function() {
read_page <- function(country, index) {
Sys.sleep(sample(1:10,size = 1,replace = TRUE))
read_csv(paste0("https://www.econdb.com/api/series/",index,country, "/?format=csv"),
show_col_types = FALSE, col_types = "Ddc") |>
mutate(country_abb = country) |>
rename(index = paste0(index,country)) |>
set_names(c("date", index, "country_abb"))
}
map2_dfr(data_list$lists$Var1,data_list$lists$Var2,
possibly(~read_page(country = .x,index = .y),otherwise = NULL,quiet = TRUE))|>
pivot_longer(!c(date, country_abb), names_to = "index",values_to = "rate",values_drop_na = TRUE) |>
left_join(data_list$country_code, by = c("country_abb" = "wb_api2c")) |>
left_join(data_list$index_df, by = c("index" = "indexes")) |>
rename("country_name" = country.name.en)
}
box::use(
app/logic/plot_func,
)
box::use(
shiny[moduleServer, NS],
echarts4r[echarts4rOutput,renderEcharts4r],
)
#' @export
ui <- function(id) {
ns <- NS(id)
echarts4rOutput("plot")
}
#' @export
server <- function(id,df) {
moduleServer(id, function(input, output, session) {
output$plot <- renderEcharts4r({plot_func$country_plot(df())})
})
}
box::use(
shiny[bootstrapPage, moduleServer, NS,reactive],
)
box::use(
app/logic/get_data,
app/view/plots,
)
#' @export
ui <- function(id) {
ns <- NS(id)
bootstrapPage(
plots$ui(ns("plot"))
)
}
#' @export
server <- function(id) {
moduleServer(id, function(input, output, session) {
df <- reactive({get_data$load_data()})
plots$server("plot", df)
})
}
runApp()
# This file allows packrat (used by rsconnect during deployment) to pick up dependencies.
library(rhino)
library(echarts4r)
library(naniar)
library(reactable)
library(htmlwidgets)
library(countrycode)
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
shiny::runApp()
df
load("~/Documents/R/Macro_Economics/.RData")
runApp()
df <- reactive(get_data$load_data())
df
runApp()
df
box::use(
shiny[bootstrapPage, moduleServer, NS,reactive],
)
box::use(
app/logic/get_data,
app/view/plots,
)
#' @export
ui <- function(id) {
ns <- NS(id)
bootstrapPage(
plots$ui(ns("plot"))
)
}
#' @export
server <- function(id) {
moduleServer(id, function(input, output, session) {
df <- get_data$load_data()
plots$server("plot",df)
})
}
df
box::use(
app/logic/plot_func,
app/logic/get_data
)
box::use(
shiny[moduleServer, NS],
echarts4r[echarts4rOutput,renderEcharts4r],
)
#' @export
ui <- function(id) {
ns <- NS(id)
echarts4rOutput("plots")
}
#' @export
server <- function(id,data) {
moduleServer(id,  function(input, output, session) {
print("Modules")
output$plots <- renderEcharts4r({plot_func$country_plot(data)})
print("work!")
})
}
box::use(
echarts4r[e_charts,e_line,e_theme,e_datazoom,e_tooltip,e_title],
dplyr[filter,group_by,arrange],
)
country_plot <- function(data , index_name = "Customer Price Index", country = "TR"){
data |>
filter(index_names == index_name & country_abb == country) |>
group_by(country_name) |>
arrange(date) |>
e_charts(x = date) |>
e_line(serie = rate) |>
e_theme("dark") |>
e_datazoom(type = "slider") |>
e_tooltip(trigger = "axis") |>
e_title(index_name)
}
df
box::use(
shiny[bootstrapPage, moduleServer, NS,reactive],
)
box::use(
app/logic/get_data,
app/view/plots,
)
#' @export
ui <- function(id) {
ns <- NS(id)
bootstrapPage(
plots$ui(ns("plot"))
)
}
#' @export
server <- function(id) {
moduleServer(id, function(input, output, session) {
df <- get_data$load_data()
plots$server("plot",df)
})
}
df
get_data$load_data()
box::use(
countrycode,
dplyr[select,distinct,pull],
tidyr[drop_na],
tibble[tibble],
)
# index names
#' @export
index_names <- c("Customer Price Index", "Unemployment"
,"Real gross fixed capital formation"
, "Real public consumption"
, "Retail trade"
, "Industrial production"
, "Real gross domestic product"
, "Consumer confidence index"
, "Producer price index"
, "Government debt"
, "Gross domestic product"
, "Real private consumption"
, "House price"
, "Utilization rate"
, "Sentiment index"
, "Commercial balance (goods + services)"
, "Public consumption"
, "Private consumption"
, "Gross fixed capital formation"
, "Exports of goods and services"
, "Real change in inventories"
, "Real exports of goods and services"
, "Stock exchange index"
, "Real imports of goods and services"
, "Imports of goods and services"
, "Population"
, "Change in inventories"
, "Government balance"
, "Total employment"
, "Job vacancy rate"
, "Job quits rate"
, "GDP per capital"
, "Real GDP per capital"
, "General government total expenditure"
, "General government total revenue"
, "Money supply"
, "Current account balance"
, "Hourly wage manufacturing"
, "Job layoffs rate"
, "Job hires rate"
, "Oil production"
, "Production electricity")
# country codes and names
#' @export
country_code <- countrycode::codelist_panel |>
select(country.name.en, wb_api2c ) |>
distinct() |>
drop_na()
# just country codes
#' @export
country_codes <- country_code |> pull(wb_api2c)
# just index codes
#' @export
indexes <- c("CPI", "URATE", "RGFCF", "RPUC","RETA",
"IP", "RGDP","CONF","PPI","GDEBT","GDP",
"RPRC","HOU","UTIL","SENT","CBAL","PUC",
"PRC", "GFCF", "EXP", "RCI", "REXP","SEI",
"RIMP","IMP","POP","CI","GBAL","EMP","JVR",
"JQR","GDPPC","RGDPPC","GSPE","GREV","M3",
"CA","WAGEMAN","JLR","JHR","OILPROD","ELE")
# index code + names
#' @export
index_df <- tibble(index_names = index_names ,  indexes = indexes)
# the data we will import
#' @export
lists <- expand.grid(c("TR","US","FR"),c("CPI","PPI","URATE"),stringsAsFactors = FALSE)
box::use(
dplyr[select,distinct,pull,mutate,rename,left_join],
tidyr[drop_na,pivot_longer],
readr[read_csv],
purrr[set_names,map2_dfr,possibly],
tibble[tibble],
)
box::use(
app/logic/data_list
)
# Datasets
#' @export
load_data <- function() {
read_page <- function(country, index) {
Sys.sleep(sample(1:10,size = 1,replace = TRUE))
read_csv(paste0("https://www.econdb.com/api/series/",index,country, "/?format=csv"),
show_col_types = FALSE, col_types = "Ddc") |>
mutate(country_abb = country) |>
rename(index = paste0(index,country)) |>
set_names(c("date", index, "country_abb"))
}
map2_dfr(data_list$lists$Var1,data_list$lists$Var2,
possibly(~read_page(country = .x,index = .y),otherwise = NULL,quiet = TRUE))|>
pivot_longer(!c(date, country_abb), names_to = "index",values_to = "rate",values_drop_na = TRUE) |>
left_join(data_list$country_code, by = c("country_abb" = "wb_api2c")) |>
left_join(data_list$index_df, by = c("index" = "indexes")) |>
rename("country_name" = country.name.en)
}
box::use(
echarts4r[e_charts,e_line,e_theme,e_datazoom,e_tooltip,e_title],
dplyr[filter,group_by,arrange],
)
country_plot <- function(data , index_name = "Customer Price Index", country = "TR"){
data |>
filter(index_names == index_name & country_abb == country) |>
group_by(country_name) |>
arrange(date) |>
e_charts(x = date) |>
e_line(serie = rate) |>
e_theme("dark") |>
e_datazoom(type = "slider") |>
e_tooltip(trigger = "axis") |>
e_title(index_name)
}
box::use(
app/logic/plot_func,
app/logic/get_data
)
box::use(
shiny[moduleServer, NS],
echarts4r[echarts4rOutput,renderEcharts4r],
)
#' @export
ui <- function(id) {
ns <- NS(id)
echarts4rOutput("plots")
}
#' @export
server <- function(id,data) {
moduleServer(id,  function(input, output, session) {
print("Modules")
output$plots <- renderEcharts4r({plot_func$country_plot(data)})
print("work!")
})
}
box::use(
shiny[bootstrapPage, moduleServer, NS,reactive],
)
box::use(
app/logic/get_data,
app/view/plots,
)
#' @export
ui <- function(id) {
ns <- NS(id)
bootstrapPage(
plots$ui(ns("plot"))
)
}
#' @export
server <- function(id) {
moduleServer(id, function(input, output, session) {
df <- get_data$load_data()
plots$server("plot",df)
})
}
df
df()
df
runApp()
df
box::use(
app/logic/plot_func,
app/logic/get_data
)
box::use(
shiny[moduleServer, NS],
echarts4r[echarts4rOutput,renderEcharts4r],
)
#' @export
ui <- function(id) {
ns <- NS(id)
echarts4rOutput("plots")
}
#' @export
server <- function(id,data) {
moduleServer(id,  function(input, output, session) {
print("Modules")
output$plots <- renderEcharts4r(plot_func$country_plot(data()))
print("work!")
})
}
box::use(
shiny[bootstrapPage, moduleServer, NS,reactive],
)
box::use(
app/logic/get_data,
app/view/plots,
)
#' @export
ui <- function(id) {
ns <- NS(id)
bootstrapPage(
plots$ui(ns("plot"))
)
}
#' @export
server <- function(id) {
moduleServer(id, function(input, output, session) {
df <- reactive(get_data$load_data())
plots$server("plot",df())
})
}
runApp()
# This file allows packrat (used by rsconnect during deployment) to pick up dependencies.
library(rhino)
library(echarts4r)
library(naniar)
library(reactable)
library(htmlwidgets)
library(countrycode)
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
shiny::runApp()
df <- reactive(get_data$load_data())
df
runApp()
