cpi = as.double(cpi),
country_abb = as.character(country_abb))
}
df <- map2_df(list("US"),list("IP"),possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
View(df)
df <- map2_df(list("US"),list("IP"),possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
read_cpi <- function(country, index) {
Sys.sleep(sample(1:15,size = 1,replace = TRUE))
read_csv(paste0("https://www.econdb.com/api/series/",index,country, "/?format=csv"),
show_col_types = FALSE) |>
mutate(country_abb = country) |>
rename(index = paste0(index,country)) |>
set_names(c("date", index, "country_abb"))
}
df <- map2_df(list("US"),list("IP"),possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
View(df)
df <- map2_df(list("US"),list("IP","CPI"),possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
View(df)
df <- map2_dfr(list("US"),list("IP","CPI"),possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
View(df)
df <- map2_dfr(list("US","TR"),list("IP","CPI"),possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
View(df)
df <- map2_dfr(codes,index,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
codes |> class()
codes |> str()
codes <- country_code |> pull(wb_api2c) |> as.list()
index <- c("CPI", "URATE", "RGFCF", "RPUC","RETA",
"IP", "RGDP","CONF","PPI","GDEBT","GDP",
"RPRC","HOU","UTIL","SENT","CBAL","PUC",
"PRC", "GFCF", "EXP", "RCI", "REXP","SEI",
"RIMP","IMP","POP","CI","GBAL","EMP","JVR",
"JQR","GDPPC","RGDPPC","GSPE","GREV","M3",
"CA","WAGEMAN","JLR","JHR","OILPROD","ELE") |> as.list()
df <- map2_dfr(codes,index,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
map(codes,index)
map_raw(codes, index)
for (i in index) {
df <- map2_dfr(codes,i,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
}
data <- for (i in index) {
df <- map2_dfr(codes,i,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
}
data <- for (i in index) {
df <- map2_dfr(codes,i,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
}
df <- for (i in index) {
df <- map2_dfr(codes,i,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
}
View(df)
for (i in index) {
df <- map2_dfr(codes,i,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
df <- bind_rows(df)
}
codes <- country_code |> pull(wb_api2c)
index <- c("CPI", "URATE", "RGFCF", "RPUC","RETA",
"IP", "RGDP","CONF","PPI","GDEBT","GDP",
"RPRC","HOU","UTIL","SENT","CBAL","PUC",
"PRC", "GFCF", "EXP", "RCI", "REXP","SEI",
"RIMP","IMP","POP","CI","GBAL","EMP","JVR",
"JQR","GDPPC","RGDPPC","GSPE","GREV","M3",
"CA","WAGEMAN","JLR","JHR","OILPROD","ELE")
lists <- expand.grid(codes,index)
lists
df <- map2_dfr(lists$Var1,lists$Var2,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
indexes <- c("CPI","CONF","IP","PPI","HOU","RGDPPC")
lists <- expand.grid(codes,indexes)
lists
lists |> str()
read_cpi <- function(country, index) {
Sys.sleep(sample(1:15,size = 1,replace = TRUE))
read_csv(paste0("https://www.econdb.com/api/series/",index,country, "/?format=csv"),
show_col_types = FALSE) |>
mutate(country_abb = country) |>
rename(index = paste0(index,country)) |>
set_names(c("date", index, "country_abb"))
}
df <- map2_dfr(lists$Var1,lists$Var2,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
library(rhino)
library(tidyverse)
library(echarts4r)
library(naniar)
library(reactable)
library(htmlwidgets)
library(countrycode)
df <- map2_dfr(lists$Var1,lists$Var2,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
#,"IP","PPI","HOU","RGDPPC"
indexes <- c("CPI","CONF")
lists <- expand.grid(codes,indexes)
read_cpi <- function(country, index) {
Sys.sleep(sample(1:15,size = 1,replace = TRUE))
read_csv(paste0("https://www.econdb.com/api/series/",index,country, "/?format=csv"),
show_col_types = FALSE) |>
mutate(country_abb = country) |>
rename(index = paste0(index,country)) |>
set_names(c("date", index, "country_abb"))
}
df <- map2_dfr(lists$Var1,lists$Var2,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
lists
read_cpi <- function(country, index) {
Sys.sleep(sample(1:10,size = 1,replace = TRUE))
read_csv(paste0("https://www.econdb.com/api/series/",index,country, "/?format=csv"),
show_col_types = FALSE) |>
mutate(country_abb = country) |>
rename(index = paste0(index,country)) |>
set_names(c("date", index, "country_abb"))
}
df <- map2_dfr(lists$Var1,lists$Var2,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
View(df)
read_cpi <- function(country, index) {
Sys.sleep(sample(1:10,size = 1,replace = TRUE))
read_csv(paste0("https://www.econdb.com/api/series/",index,country, "/?format=csv"),
show_col_types = FALSE) |>
mutate(country_abb = country) |>
rename(index = paste0(index,country)) |>
set_names(c("date", index, "country_abb")) |>
mutate(date = as.Date(date))
}
df <- map2_dfr(lists$Var1,lists$Var2,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
read_cpi <- function(country, index) {
Sys.sleep(sample(1:10,size = 1,replace = TRUE))
read_csv(paste0("https://www.econdb.com/api/series/",index,country, "/?format=csv"),
show_col_types = FALSE) |>
mutate(country_abb = country) |>
rename(index = paste0(index,country)) |>
set_names(c("date", index, "country_abb")) |>
mutate(date = as.Date(date), index = as.double(index), country_abb = as.character(country_abb))
}
df <- map2_dfr(lists$Var1,lists$Var2,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
df <- map2_df(lists$Var1,lists$Var2,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
list()
lists
df <- map2_dfr(c("TR","US"),c("CPI","CONF"),possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
View(df)
read_cpi <- function(country, index) {
Sys.sleep(sample(1:10,size = 1,replace = TRUE))
read_csv(paste0("https://www.econdb.com/api/series/",index,country, "/?format=csv"),
show_col_types = FALSE) |>
mutate(country_abb = country) |>
rename(index = paste0(index,country)) |>
set_names(c("date", index, "country_abb"))
}
df <- map2_dfr(c("TR","US"),c("CPI","CONF"),possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
View(df)
lists$Var1
c("TR","US")
lists$Var2
lists <- expand.grid(codes,indexes) |> as.character()
lists |> glimpse()
listst
lists
lists <- expand.grid(codes,indexes,stringsAsFactors = FALSE)
lists
df <- map2_dfr(lists$Var1,lists$Var2,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
read_cpi(country = "TR",index = "CPI")
read_cpi <- function(country, index) {
Sys.sleep(sample(1:10,size = 1,replace = TRUE))
read_csv(paste0("https://www.econdb.com/api/series/",index,country, "/?format=csv"),
show_col_types = FALSE, col_types = "Ddc") |>
mutate(country_abb = country) |>
rename(index = paste0(index,country)) |>
set_names(c("date", index, "country_abb"))
}
read_cpi(country = "TR","CI")
read_cpi <- function(country, index) {
Sys.sleep(sample(1:10,size = 1,replace = TRUE))
read_csv(paste0("https://www.econdb.com/api/series/",index,country, "/?format=csv"),
show_col_types = FALSE, col_types = "Ddc") |>
mutate(country_abb = country) |>
rename(index = paste0(index,country)) |>
set_names(c("date", index, "country_abb"))
}
df <- map2_dfr(lists$Var1,lists$Var2,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
View(df)
lists <- expand.grid(codes,index,stringsAsFactors = FALSE)
lists
read_cpi <- function(country, index) {
Sys.sleep(sample(1:10,size = 1,replace = TRUE))
read_csv(paste0("https://www.econdb.com/api/series/",index,country, "/?format=csv"),
show_col_types = FALSE, col_types = "Ddc") |>
mutate(country_abb = country) |>
rename(index = paste0(index,country)) |>
set_names(c("date", index, "country_abb"))
}
df <- map2_dfr(lists$Var1,lists$Var2,possibly(~read_cpi(country = .x,index = .y),otherwise = NULL) )
View(df)
library(rhino)
library(echarts4r)
library(naniar)
library(reactable)
library(htmlwidgets)
library(countrycode)
library(readr)
library(dplyr)
library(purrr)
View(df)
library(rhino)
library(echarts4r)
library(naniar)
library(reactable)
library(htmlwidgets)
library(countrycode)
library(readr)
library(dplyr)
library(purrr)
library(tidyr)
box::use(
countrycode::codelist_panel,
dplyr[select,distinct,pull,mutate,rename],
tidyr[drop_na],
readr[read_csv],
purr[set_names,map2_dfr]
)
df |>  glimpse()
df |>
filter(country_abb = "TR") |>
select(date,JLR, JHR)
df |>
filter(country_abb = "TR") |>
select(date,JLR, JHR)
df |>
filter(country_abb = ="TR") |>
df |>
filter(country_abb =="TR") |>
select(date,JLR, JHR)
df |>
filter(country_abb =="TR") |>
select(date,JLR, JHR) |>
drop_na()
df |>
filter(country_abb =="TR") |>
select(date,JLR, JHR) |>
drop_na()
df |>
filter(country_abb =="TR") |>
select(date,JVR, JQR) |>
drop_na()
df |>
filter(country_abb =="TR") |>
select(date,REXP, RIMP) |>
drop_na()
df |>
filter(country_abb =="TR") |>
select(date,EXP, IMP) |>
drop_na()
df |>
filter(country_abb =="TR") |>
select(date,CPI) |>
drop_na()
df |>
filter(country_abb =="TR") |>
select(date,CPI,CONF) |>
drop_na()
df |>
filter(country_abb =="TR") |>
select(date,CPI,PPI) |>
drop_na()
df |>
filter(country_abb =="TR") |>
select(date,CPI,CONF) |>
drop_na()
df |>
filter(country_abb =="TR") |>
select(date,CONF) |>
drop_na()
df |>
filter(country_abb =="TR") |>
select(date,CONF,CPI)
df |>
filter(country_abb =="TR") |>
select(date,CONF,CPI) |>
miss_var_summary()
df |>
filter(country_abb =="TR") |>
select(date,CONF,CPI) |>
View()
df |> View()
box::use(
countrycode::codelist_panel,
dplyr[select,distinct,pull,mutate,rename],
tidyr[drop_na],
readr[read_csv],
purr[set_names,map2_dfr]
)
box::use(
countrycode$codelist_panel,
dplyr[select,distinct,pull,mutate,rename],
tidyr[drop_na],
readr[read_csv],
purr[set_names,map2_dfr]
)
box::use(
countrycode$codelist_panel,
dplyr[select,distinct,pull,mutate,rename],
tidyr[drop_na],
readr[read_csv],
purr[set_names,map2_dfr]
)
box::use(
dplyr[select,distinct,pull,mutate,rename],
tidyr[drop_na],
readr[read_csv],
purr[set_names,map2_dfr]
)
box::use(
dplyr[select,distinct,pull,mutate,rename],
tidyr[drop_na],
readr[read_csv],
purr[set_names,map2_dfr]
)
box::use(
dplyr[select,distinct,pull,mutate,rename],
tidyr[drop_na],
readr[read_csv],
purrr[set_names,map2_dfr]
)
View(df)
df |>
select(date, country_abb) |>
distinct() |> View()
df |>
select(date, country_abb) |>
distinct() |>
left_join(df, by = c("date" = "date", "country_abb" = "country_abb")) |> View()
df |>
select(date, country_abb) |>
distinct() |>
left_join(df |> drop_na(), by = c("date" = "date", "country_abb" = "country_abb")) |> View()
df |>
select(date, country_abb) |>
distinct() |>
right_join(df |> drop_na(), by = c("date" = "date", "country_abb" = "country_abb")) |> View()
df |>
select(date, country_abb) |>
distinct() |>
left_join(df |> drop_na(), by = c("date" = "date", "country_abb" = "country_abb")) |> View()
df |> glimpse()
df |>
pivot_longer(!c(date, country_abb), names_to = "index",values_to = "rate")
df |>
pivot_longer(!c(date, country_abb), names_to = "index",values_to = "rate") |>
drop_na()
df <- df |>
pivot_longer(!c(date, country_abb), names_to = "index",values_to = "rate") |>
drop_na()
View(df)
data$df
d
data$df
box::use(
app/logic/data
)
box::use(
app/logic/data,
purrr$map2_dfr
)
box::use(
purrr$map2_dfr,
tidyr[drop_na, pivot_longer],
app/logic/functions
)
box::use(
purrr$map2_dfr,
tidyr[drop_na, pivot_longer],
dplyr[select,distinct,mutate,rename],
app/logic/functions
)
box::use(
purrr[map2_dfr],
tidyr[drop_na, pivot_longer],
dplyr[select,distinct,mutate,rename],
app/logic/functions
)
box::use(
app/logic/data,
purrr$map2_dfr
)
box::use(
app/logic/data
)
box::use(
app/logic/data
)
box::use(
app/logic/data
)
box::use(
app/logic/data
)
box::use(
purrr[map2_dfr],
tidyr[drop_na, pivot_longer],
dplyr[select,distinct,mutate,rename,pull],
app/logic/functions
)
box::use(
app/logic/data
)
box::use(
purrr[map2_dfr,possibly],
tidyr[drop_na, pivot_longer],
dplyr[select,distinct,mutate,rename,pull],
app/logic/functions
)
box::use(
app/logic/data
)
library(rhino)
library(echarts4r)
library(naniar)
library(reactable)
library(htmlwidgets)
library(countrycode)
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
box::use(
app/logic/data
)
data$
app/logic/data
box::reload(data)
box::use(
shiny[moduleServer,NS]
)
reac_table <- df |> reactable()
#' @export
server <- function(id) {
moduleServer(id, function(input, output, session) {
table$server("table")
})
}
shiny::runApp()
runApp()
box::use(
purrr[map2_dfr,possibly],
tidyr[drop_na, pivot_longer],
dplyr[select,distinct,mutate,rename,pull],
reactable[reactable],
app/logic/functions
)
# Country Abbreviation
country_code <- countrycode::codelist_panel |>
select(country.name.en, wb_api2c ) |>
distinct() |>
drop_na()
codes <- country_code |> pull(wb_api2c)
index <- c("CPI", "URATE", "RGFCF", "RPUC","RETA",
"IP", "RGDP","CONF","PPI","GDEBT","GDP",
"RPRC","HOU","UTIL","SENT","CBAL","PUC",
"PRC", "GFCF", "EXP", "RCI", "REXP","SEI",
"RIMP","IMP","POP","CI","GBAL","EMP","JVR",
"JQR","GDPPC","RGDPPC","GSPE","GREV","M3",
"CA","WAGEMAN","JLR","JHR","OILPROD","ELE")
# lists <- expand.grid(codes,index,stringsAsFactors = FALSE)
lists <- expand.grid(c("TR","US","FR"),c("CPI","PPI","URATE"),stringsAsFactors = FALSE)
df <- map2_dfr(lists$Var1,lists$Var2,
possibly(~functions$read_cpi(country = .x,index = .y),otherwise = NULL))|>
pivot_longer(!c(date, country_abb), names_to = "index",values_to = "rate") |>
drop_na()
# df <- map2_dfr(lists$Var1,lists$Var2,
#                possibly(~functions$read_cpi(country = .x,index = .y),otherwise = NULL))|>
#   pivot_longer(!c(date, country_abb), names_to = "index",values_to = "rate") |>
#   drop_na()
#' @export
df
#' @export
reac_table <- df |> reactable()
# Index:
# CPI - Customer Price Index *
# URATE - Unemployment *
# RGFCF - Real gross fixed capital formation
# RPUC - Real public consumption
# RETA - Retail trade
# IP - Industrial production *
# RGDP - Real gross domestic product
# CONF - Consumer confidence index *
# PPI - Producer price index *
# GDEBT - Government debt *
# GDP - Gross domestic product
# RPRC - Real private consumption
# HOU - House price *
# UTIL - Utilization rate
# SENT - Sentiment index
# CBAL - Commercial balance (goods + services)
# PUC - Public consumption
# PRC - Private consumption
# GFCF - Gross fixed capital formation
# EXP - Exports of goods and services
# RCI - Real change in inventories
# REXP - Real exports of goods and services *
# SEI - Stock exchange index
# RIMP - Real imports of goods and services *
# IMP -  Imports of goods and services
# POP -  Population *
# CI - Change in inventories
# GBAL - Government balance
# EMP - Total employment
# JVR - Job vacancy rate *
# JQR - Job quits rate *
# GDPPC - GDP per capital
# RGDPPC - Real GDP per capital *
# GSPE - General government total expenditure
# GREV - General government total revenue
# M3 - Money supply
# CA - Current account balance
# WAGEMAN - Hourly wage manufacturing
# JLR - Job layoffs rate *
# JHR - Job hires rate *
# OILPROD - Oil production
# ELE - Production electricity *
runApp()
