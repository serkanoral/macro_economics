return(plot)
}
country_plot_(data = df)
df |>
filter(index_names %in% c("Customer Price Index","Unemployment") &
country_name == "Turkey") |>
e_charts_(x = date)
df |>
filter(index_names %in% c("Customer Price Index","Unemployment") &
country_name == "Turkey")
df |>
filter(index_names %in% c("Customer Price Index","Unemployment") &
country_name == "Turkey") |>
pivot_wider(names_from = index,values_from = rate)
df |>
filter(index_names %in% c("Customer Price Index","Unemployment") &
country_name == "Turkey") |>
pivot_wider(names_from = index,values_from = rate) |>
e_charts_(x = date)
df |>
filter(index_names %in% c("Customer Price Index","Unemployment") &
country_name == "Turkey") |>
pivot_wider(names_from = index,values_from = rate) |>
e_charts(x = date)
df |>
filter(index_names %in% c("Customer Price Index","Unemployment") &
country_name == "Turkey") |>
pivot_wider(names_from = index,values_from = rate) |>
e_charts(x = date) |>
e_line_(serie = index_name[1])
df |>
filter(index_names %in% c("Customer Price Index","Unemployment") &
country_name == "Turkey") |>
pivot_wider(names_from = index,values_from = rate)
df |> glimpse()
df |>
filter(index_names %in% c("Customer Price Index","Unemployment") &
country_name == "Turkey") |>
pivot_wider(names_from = index_names,values_from = rate) |>
e_charts(x = date) |>
e_line_(serie = index_name[1])
df |>
filter(index_names %in% c("Customer Price Index","Unemployment") &
country_name == "Turkey") |>
pivot_wider(names_from = index_names,values_from = rate) |>
e_charts(x = date) |>
e_line_(serie = index_name[1]) |>
e_line_(serie = index_name[2])
df |>
filter(index_names %in% c("Customer Price Index","Unemployment") &
country_name == "Turkey") |>
pivot_wider(names_from = index_names,values_from = rate) |>
e_charts(x = date) |>
e_line_(serie = index_name[1]) |>
e_line_(serie = index_name[2], x_index = 1, y_index = 1)
country_plot_ <- function(data , index_name = c("Customer Price Index","Unemployment"),
country = "Turkey"){
data |>
filter(index_names %in% index_name & country_name == country) |>
pivot_wider(names_from = index_names,values_from = rate) |>
e_charts_(x = date) |>
e_line_(serie = index_name[1]) |>
e_line_(serie = index_name[2], x_index = 1, y_index = 1) |>
e_theme("dark") |>
e_datazoom(type = "slider") |>
e_tooltip(trigger = "axis") |>
e_title(country)
}
df |>
filter(index_names %in% c("Customer Price Index","Unemployment") &
country_name == "Turkey") |>
pivot_wider(names_from = index_names,values_from = rate) |>
e_charts_(x = date) |>
e_line_(serie = index_name[1]) |>
e_line_(serie = index_name[2], x_index = 1, y_index = 1)
df |>
filter(index_names %in% c("Customer Price Index","Unemployment") &
country_name == "Turkey") |>
pivot_wider(names_from = index_names,values_from = rate) |>
e_charts(x = date) |>
e_line_(serie = index_name[1]) |>
e_line_(serie = index_name[2], x_index = 1, y_index = 1)
country_plot_ <- function(data , index_name = c("Customer Price Index","Unemployment"),
country = "Turkey"){
data |>
filter(index_names %in% index_name & country_name == country) |>
pivot_wider(names_from = index_names,values_from = rate) |>
e_charts_(x = date) |>
e_line_(serie = index_name[1]) |>
e_line_(serie = index_name[2], x_index = 1, y_index = 1) |>
e_theme("dark") |>
e_datazoom(type = "slider") |>
e_tooltip(trigger = "axis") |>
e_title(country)
}
country_plot_(data = df)
country_plot_ <- function(data , index_name = c("Customer Price Index","Unemployment"),
country = "Turkey"){
data |>
filter(index_names %in% index_name & country_name == country) |>
pivot_wider(names_from = index_names,values_from = rate) |>
e_charts(x = date) |>
e_line_(serie = index_name[1]) |>
e_line_(serie = index_name[2], x_index = 1, y_index = 1) |>
e_theme("dark") |>
e_datazoom(type = "slider") |>
e_tooltip(trigger = "axis") |>
e_title(country)
}
country_plot_(data = df)
index_name
index_names
country_plot_ <- function(data ,
index_name = c("Real imports of goods and services","Real exports of goods and services"),
country = "Turkey"){
data |>
filter(index_names %in% index_name & country_name == country) |>
pivot_wider(names_from = index_names,values_from = rate) |>
e_charts(x = date) |>
e_line_(serie = index_name[1]) |>
e_line_(serie = index_name[2], x_index = 1, y_index = 1) |>
e_theme("dark") |>
e_datazoom(type = "slider") |>
e_tooltip(trigger = "axis") |>
e_title(country)
}
country_plot_(data = df)
index_plot <- function(data ,
index_name = c("Real imports of goods and services","Real exports of goods and services"),
country = "Turkey"){
data |>
filter(index_names %in% index_name & country_name == country) |>
pivot_wider(names_from = index_names,values_from = rate) |>
e_charts(x = date) |>
e_line_(serie = index_name[1]) |>
e_line_(serie = index_name[2], x_index = 1, y_index = 1) |>
e_theme("dark") |>
e_datazoom(type = "slider") |>
e_tooltip(trigger = "axis") |>
e_title(country)
}
runApp()
box::use(
app/logic/plot_func[index_plot],
app/logic/data_list
)
box::use(
shiny[moduleServer, NS,tagList,selectizeInput,fluidPage],
echarts4r[echarts4rOutput,renderEcharts4r],
)
#' @export
ui <- function(id) {
ns <- NS(id)
fluidPage(
selectizeInput(inputId = ns("select_index"),
label = "Select Index",
choices = data_list$index_names,
selected = c("Real imports of goods and services","Real exports of goods and services"),
multiple = TRUE,
options = list(maxItems = 2,minItems =2)),
selectizeInput(inputId = ns("select_country"),
label = "Select Country",
choices = data_list$country_names_,
selected = "Turkey",
multiple = FALSE),
echarts4rOutput(ns("plot_country"))
)
}
#' @export
server <- function(id,df) {
moduleServer(id,  function(input, output, session) {
output$plot_country <- renderEcharts4r({index_plot(data = df(),
index_name = input$select_index,
country = input$select_country)})
})
}
runApp()
box::use(
shiny[fluidPage, moduleServer, NS,reactiveFileReader,bindCache,
fluidRow,column,br,tabsetPanel,tabPanel],
readr[read_rds],
)
box::use(
app/logic/get_data[load_data],
app/view/plot_country,
)
#' @export
ui <- function(id) {
ns <- NS(id)
fluidPage(
tabsetPanel(id = "tabs",type = "pills",
tabPanel(title = "Index",plot_country$ui(ns("plot_country"))),
tabPanel(title = "Country", plot_index$ui(ns("plot_index"))))
)
}
#' @export
server <- function(id) {
moduleServer(id, function(input, output, session) {
df <- reactiveFileReader(86400000,session, "app/logic/df.rds",read_rds)
plot_country$server("plot_country", df)
plot_index$server("plot_index",df)
})
}
box::use(
app/logic/plot_func[index_plot],
app/logic/data_list
)
box::use(
shiny[moduleServer, NS,tagList,selectizeInput,fluidPage],
echarts4r[echarts4rOutput,renderEcharts4r],
)
#' @export
ui <- function(id) {
ns <- NS(id)
fluidPage(
selectizeInput(inputId = ns("select_index"),
label = "Select Index",
choices = data_list$index_names,
selected = c("Real imports of goods and services","Real exports of goods and services"),
multiple = TRUE,
options = list(maxItems = 2,minItems =2)),
selectizeInput(inputId = ns("select_country"),
label = "Select Country",
choices = data_list$country_names_,
selected = "Turkey",
multiple = FALSE),
echarts4rOutput(ns("plot_index"))
)
}
#' @export
server <- function(id,df) {
moduleServer(id,  function(input, output, session) {
output$plot_index <- renderEcharts4r({index_plot(data = df(),
index_name = input$select_index,
country = input$select_country)})
})
}
runApp()
df |> glimpse()
df |>
filter(index_name == "Population" & country_name == " Turkey") |>
e_charts(x = date) |>
e_bar(rate)
df |>
filter(index_names == "Population" & country_name == " Turkey") |>
e_charts(x = date) |>
e_bar(rate)
df |>
filter(index_names == "Population" & country_name == " Turkey")
View(df)
df |>
filter(index_names == "Population" & country_name == " Turkey")
index_name
index_names
df |>
filter(index_names == "Population" & country_name == "Turkey") |>
e_charts(x = date) |>
e_bar(rate)
df |>
filter(index_names == "Population" & country_name %in% c("Turkey","Japan")) |>
e_charts(x = date) |>
e_bar(rate)
df |>
filter(index_names == "Population" & country_name %in% c("Turkey","Japan")) |>
group_by(country_name) |>
e_charts(x = date) |>
e_bar(rate)
df |>
filter(index_names == "Population" & country_name %in% c("Turkey","Japan")) |>
group_by(country_name) |>
e_charts(x = date) |>
e_bar(rate,stack = "grp")
df |>
filter(index_names == "Population" & country_name %in% c("Turkey","Japan")) |>
group_by(country_name) |>
e_charts(x = date,stack = "grp") |>
e_bar(rate)
df |>
filter(index_names == "Population" & country_name == "Turkey") |>
group_by(country_name) |>
e_charts(x = date,stack = "grp") |>
e_bar(rate)
df |>
filter(index_names == "Population" & country_name == "Turkey") |>
group_by(country_name) |>
e_charts(x = date,stack = "grp") |>
e_area(rate)
df |>
filter(index_names == "Population" & country_name == c("Turkey", "Japan")) |>
group_by(country_name) |>
e_charts(x = date,stack = "grp") |>
e_area(rate)
df |>
filter(index_names == "Population" & country_name == c("Turkey", "Japan")) |>
pivot_wider(names_from = index_names,values_from = rate) |>
e_charts(x = date) |>
e_area(date) |>
e_line_(serie = country_name[1]) |>
e_line_(serie = country_name[2], x_index = 1, y_index = 1)
df |>
filter(index_names == "Population" & country_name %in% c("Turkey", "Japan")) |>
pivot_wider(names_from = index_names,values_from = rate) |>
e_charts(x = date) |>
e_area(date) |>
e_line_(serie = country_name[1]) |>
e_line_(serie = country_name[2], x_index = 1, y_index = 1)
df |>
filter(index_names == "Population" & country_name %in% c("Turkey", "Japan")) |>
pivot_wider(names_from = index_names,values_from = rate) |>
e_charts(x = date) |>
e_area(date) |>
e_line_(serie = country_name[1]) |>
e_line_(serie = country_name[2], x_index = 1, y_index = 1)
df |>
filter(index_names == "Population" & country_name %in% c("Turkey", "Japan")) |>
pivot_wider(names_from = index_names,values_from = rate) |>
e_charts(x = date) |>
e_area_(serie = country_name[1]) |>
e_area_(serie = country_name[2], x_index = 1, y_index = 1)
df |>
filter(index_names == "Population" & country_name %in% c("Turkey", "Japan")) |>
pivot_wider(names_from = country_name,values_from = rate) |>
e_charts(x = date) |>
e_area_(serie = country_name[1]) |>
e_area_(serie = country_name[2], x_index = 1, y_index = 1)
runApp()
shiny::runApp()
runApp()
fluidPage(
titlePanel(title = "Macro Economics"),
br(),
p(),
tabsetPanel(id = "tabs",type = "pills",
br(),
tabPanel(title = "Index",plot_country$ui(ns("plot_country"))),
tabPanel(title = "Country", plot_index$ui(ns("plot_index"))))
)
runApp()
shiny::p("f")
runApp()
fluidPage(
titlePanel(title = "Macro Economics"),
br(),
tabsetPanel(id = "tabs",type = "pills",
br(),
tabPanel(title = "Index",plot_country$ui(ns("plot_country"))),
tabPanel(title = "Country", plot_index$ui(ns("plot_index"))))
)
runApp()
x<-p("The data is collected from www.econdb.com , you may check for more details. On the Index tab, you can compare 5 countries according to the index. On the chart, you can zoom in with selecting certain area or from below slider  slide to the date range you want to see."),
runApp()
shiny::runApp()
runApp()
shiny::runApp()
renv::status()
renv::restore()
runApp()
shiny::runApp()
runApp()
library(bslib)
renv::snapshot()
my_theme <- bs_theme(bootswatch = "darkly",
base_font = font_google("Righteous"))
runApp()
shiny::runApp()
runApp()
bslib::theme_bootswatch()
bslib::bs_theme_preview()
install.packages("thematic", dependencies = TRUE)
library(thematic)
renv::snapshot()
runApp()
bslib::bs_theme_preview()
runApp()
rhino::build_sass(watch = TRUE)
runApp()
shiny::runApp()
rhino::lint_sass()
rhino::diagnostics()
rhino:::add_node(clean = TRUE)
rhino::build_sass()
yarn("build-sass")
rhino::build_sass()
const R = require('r-integration');
rhino::build_sass()
shiny::runApp()
rhino::lint_sass()
rhino::build_sass()
shiny::runApp()
runApp()
shiny::runApp()
rhino::lint_r()
rhino::lint_r(fix = TRUE)
runApp()
rhino::build_sass()
runApp()
rhino::build_sass()
runApp()
shiny::runApp()
runApp()
rhino::build_sass()
runApp()
library(shinyWidgets)
runApp()
renv::snapshot()
runApp()
shiny::runApp()
runApp()
fluidPage(
theme = my_theme,
titlePanel(title = "Macro Economics"),
br(),
p("First chart on the Index tab, you can compare up to 5 countries for each index."),
p("Second chart on the Country tab, you can compare 2 indexes for each country.
This is a dual axis chart,
which means first index will be on the left and second index will be on the right."),
p("You can filter the dates either with selecting zoom on the right corner of the chart
and make a selection on the chart.
Also there is a slider below the chart, you can filter with that as well.
Not all the countries have these index values so the chart may appear empthy."),
br(),
tabsetPanel(id = "tabs",type = "pills",
tabPanel(title = "Index",plot_country$ui(ns("plot_country"))),
tabPanel(title = "Country", plot_index$ui(ns("plot_index"))))
)
runApp()
box::use(
app/logic/plot_func[country_plot],
app/logic/data_list
)
box::use(
shiny[moduleServer, NS,tagList,selectizeInput,fluidPage,observeEvent],
echarts4r[echarts4rOutput,renderEcharts4r],
shinyWidgets[pickerInput]
)
#' @export
ui <- function(id) {
ns <- NS(id)
fluidPage(
pickerInput(inputId = ns("select_index"),
label = "Select Index",
choices = data_list$index_names,
selected = "Customer Price Index",
multiple = FALSE),
selectizeInput(inputId = ns("select_country"),
label = "Select Country",
choices = data_list$country_names_,
selected = c("Germany","Japan","United States"),
multiple = TRUE,
options = list(maxItems = 5)),
echarts4rOutput(ns("plot_country"))
)
}
#' @export
server <- function(id,df) {
moduleServer(id,  function(input, output, session) {
output$plot_country <- renderEcharts4r({country_plot(data = df(),
index_name = input$select_index ,
country = input$select_country)})
})
}
runApp()
data_list$index_names
runApp()
remotes::install_github("dreamRs/shinyWidgets")
runApp()
renv::snapshot(confirm = FALSE)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
rhino::build_sass()
runApp()
box::use(
app/logic/plot_func[index_plot],
app/logic/data_list,
)
box::use(
shiny[moduleServer, NS,tagList,selectizeInput,fluidPage,br,fluidRow,column],
echarts4r[echarts4rOutput,renderEcharts4r],
)
#' @export
ui <- function(id) {
ns <- NS(id)
fluidPage(
br(),
fluidRow(column(6,selectizeInput(inputId = ns("select_index"),
label = "Select Index",
choices = data_list$index_names,
selected = c("Real imports of goods and services","Real exports of goods and services"),
multiple = TRUE,
options = list(maxItems = 2,minItems =2)),
column(6,selectizeInput(inputId = ns("select_country"),
label = "Select Country",
choices = data_list$country_names_,
selected = "Turkey",
multiple = FALSE)))),
echarts4rOutput(ns("plot_index"))
)
}
#' @export
server <- function(id,df) {
moduleServer(id,  function(input, output, session) {
output$plot_index <- renderEcharts4r({index_plot(data = df(),
index_name = input$select_index,
country = input$select_country)})
})
}
runApp()
rhino::lint_r()
rhino::lint_js()
rhino::lint_sass()
